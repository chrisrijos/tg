package ua.com.fielden.platform.sample.domain;

import ua.com.fielden.platform.data.generator.WithCreatedByUser;
import ua.com.fielden.platform.entity.AbstractEntity;
import ua.com.fielden.platform.entity.DynamicEntityKey;
import ua.com.fielden.platform.entity.annotation.CompanionObject;
import ua.com.fielden.platform.entity.annotation.CompositeKeyMember;
import ua.com.fielden.platform.entity.annotation.CritOnly;
import ua.com.fielden.platform.entity.annotation.CritOnly.Type;
import ua.com.fielden.platform.entity.annotation.DescTitle;
import ua.com.fielden.platform.entity.annotation.IsProperty;
import ua.com.fielden.platform.entity.annotation.KeyType;
import ua.com.fielden.platform.entity.annotation.MapEntityTo;
import ua.com.fielden.platform.entity.annotation.MapTo;
import ua.com.fielden.platform.entity.annotation.Observable;
import ua.com.fielden.platform.entity.annotation.Title;
import ua.com.fielden.platform.security.user.User;

/**
 * Represents a typical example of an entity to be generated. This particular entity is generated by generator {@link TgGeneratedEntityGenerator}.
 * 
 * @author TG Team
 *
 */
@KeyType(DynamicEntityKey.class)
@CompanionObject(ITgGeneratedEntity.class)
@MapEntityTo
@DescTitle("Desc")
public class TgGeneratedEntity extends AbstractEntity<DynamicEntityKey> implements WithCreatedByUser<TgGeneratedEntity> {
    private static final long serialVersionUID = 1L;

    @IsProperty(assignBeforeSave = true)
    @MapTo
    @Title(value = "User", desc = "User who created this entity instance.")
    @CompositeKeyMember(1)
    private User createdBy;

    @IsProperty
    @MapTo
    @Title(value = "Entity Key", desc = "Unique within a generated batch.")
    @CompositeKeyMember(2)
    private String entityKey;

    @IsProperty
    @CritOnly(Type.MULTI)
    @Title(value = "CritOnly Multi", desc = "CritOnly multi property")
    private User critOnlyMultiProp;
    
    @IsProperty
    @CritOnly(Type.SINGLE)
    @Title(value = "CritOnly Single", desc = "CritOnly single property")
    private User critOnlySingleProp;

    @Observable
    public TgGeneratedEntity setEntityKey(final String entityKey) {
        this.entityKey = entityKey;
        return this;
    }

    public String getEntityKey() {
        return entityKey;
    }

    @Observable
    public TgGeneratedEntity setCreatedBy(final User createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public User getCreatedBy() {
        return createdBy;
    }

    @Observable
    public TgGeneratedEntity setCritOnlySingleProp(final User critOnlySingleProp) {
        this.critOnlySingleProp = critOnlySingleProp;
        return this;
    }

    public User getCritOnlySingleProp() {
        return critOnlyMultiProp;
    }

    @Observable
    public TgGeneratedEntity setCritOnlyMultiProp(final User critOnlyMultiProp) {
        this.critOnlyMultiProp = critOnlyMultiProp;
        return this;
    }

    public User getCritOnlyMultiProp() {
        return critOnlyMultiProp;
    }
}